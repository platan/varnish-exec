buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url 'http://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.7'
        classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.1'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.1'
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
    }
}

plugins {
    id 'pl.allegro.tech.build.axion-release' version '1.0.1'
}

apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'jacoco'

repositories {
    jcenter()
}

allprojects {
    project.version = scmVersion.version
    group = 'com.github.platan'
    ext.displayName = null
    ext.snapshotVersion =  version.endsWith('-SNAPSHOT') ? true : false
}

ext {
    deps = [
            groovy: 'org.codehaus.groovy:groovy-all:2.3.7',
            spock: 'org.spockframework:spock-core:1.0-groovy-2.3-SNAPSHOT'
    ]
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'checkstyle'
    apply plugin: 'codenarc'
    apply plugin: 'idea'
    apply plugin: 'info.solidsoft.pitest'
    apply plugin: 'jacoco'
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: 'maven'
    apply plugin: 'sonar-runner'
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'signing'

    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    }

    pitest {
        targetClasses = ['com.github.platan.varnishexec.*']
    }

    codenarc {
        configFile = new File("${project.rootDir}/config/codenarc/rules.groovy")
        toolVersion = codenarcToolVersion
    }

    jacoco {
        toolVersion = jacocoToolVersion
    }

    checkstyle {
        toolVersion = checkstyleToolVersion
        configFile = new File("${project.rootDir}/config/checkstyle/checkstyle.xml")
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives jar
        archives javadocJar
        archives sourcesJar
    }

    signing {
        sign configurations.archives
    }

    signArchives {
        onlyIf { gradle.taskGraph.hasTask(uploadArchives) }
    }

    afterEvaluate {
        uploadArchives {
            repositories {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                    if (snapshotVersion) {
                        snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                            if (project.hasProperty("sonatypeOssUsername")) {
                                authentication(userName: sonatypeOssUsername, password: sonatypeOssPassword)
                            }
                        }
                    } else {
                        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                            if (project.hasProperty("sonatypeOssUsername")) {
                                authentication(userName: sonatypeOssUsername, password: sonatypeOssPassword)
                            }
                        }
                    }

                    pom.project {
                        name project.displayName
                        description project.description
                        url 'https://github.com/platan/varnish-exec'
                        scm {
                            url 'https://github.com/platan/varnish-exec'
                            connection 'scm:git:git://github.com/platan/varnish-exec.git'
                            developerConnection 'scm:git:ssh://git@github.com:platan/varnish-exec.git'
                        }
                        licenses {
                            license {
                                name 'MIT license'
                                url 'http://opensource.org/licenses/MIT'
                                distribution 'repo'
                            }
                        }
                        developers {
                            developer {
                                id 'platan'
                                name 'Marcin Mielnicki'
                                email 'marcin.mielnicki@gmail.com'
                            }
                        }
                    }
                }
            }
        }
    }
}

task jacocoRootReport(type: JacocoReport) {
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
    }
    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}

coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
    subprojects.sourceSets.main.allSource.srcDirs*.path.each { sourceDirs.addAll(it) }
}

tasks.coveralls {
    dependsOn jacocoRootReport
    onlyIf { System.env.'CI' }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.2.1'
}